;==============================================================
; Memory Map
;==============================================================
.memorymap
    defaultslot 0
    slotsize    $4000
    slot        0       $0000
    slot        1       $4000
    slot        2       $8000
    slot        3       $C000
.endme

.rombankmap
    bankstotal      5
    banksize        $4000
    banks           5
.endro

;==============================================================
; Reset handler
;==============================================================
.BANK   0   slot    0
.ORG    $0000
reset:
    jr  main

;==============================================================
; Interrupts
;==============================================================
.ORG    $0008
    reti

.ORG    $0010
    reti

.ORG    $0018
    reti

.ORG    $0020
    reti

.ORG    $0028
    reti

.ORG    $0030
    reti

.ORG    $0038
mode1_interrupt:
    reti

;==============================================================
; HEADER
;==============================================================
.ORG    $0040
.asc "bm80 test rom v0.1"

;==============================================================
; NMI
;==============================================================
.ORG    $0066
nmi:
    retn

;==============================================================
; MAIN - test different opcodes for bm80 emulator
;==============================================================
main:
    di
    ; can't do any calls before RAM is correctly mapped
    ; setup memory banks, 0-2 = pages 0-2 (ROM), 3 = RAM
    ld      a, BM80_ROM_PAGE_0
    out     (IO_SLOT_SELECT_0), a
    inc     a
    out     (IO_SLOT_SELECT_1), a 
    inc     a
    out     (IO_SLOT_SELECT_2), a
    ld      a, BM80_RAM_PAGE_0
    out     (IO_SLOT_SELECT_3), a

    ; setup stack pointer
    ld      sp, $FFF0

    ; test more row 1 opcodes
    ld      b, $C0      ; point to beginning of RAM
    ld      c, $00
    ld      (bc), a     ; write 32 (a) to RAM,
    add     hl, bc      ; add hl to bc, HL = 0xC000
    inc     (hl)        ; RAM++
    ld      a, (bc)     ; read RAM, should be 33
    inc     bc
    ld      (bc), a     ; write 33 (a) to RAM+1, RAM now has 33, 33

   ; rotate test, looking good
    ld      a, $40      ; bit 6 = 1
    rlca
    rlca                ; carry?
    rlca                ; into bit 0?
    ld      a, $02      ; bit 1 = 1
    rrca
    rrca
    rrca          
    rla 
    rla 
    rla 
    rla
    rra
    rra
    rra  

    ; inc/dec tests
    ld      a, $00      ; clear a
    inc     a           ; inc all 8 bit registers
    inc     b 
    inc     c
    inc     d
    inc     e
    inc     h
    inc     l

    dec     a           ; dec all 8 bit registers
    dec     a           ; sign bit?

    ld      a, $7E
    inc     a           
    inc     a           ; overflow
    inc     a
    dec     a
    dec     a           ; underflow

    ; point to RAM with HL
    ld      hl, $C000   ; RAM
    inc     (hl)        ; RAM++
    dec     (hl)        ; RAM--


    ; now we have RAM, try a call

    call    sr_set_default_slots

    ; go through a few opcodes
    nop
    ld      bc, $0040
    ld      a, (bc)     ; should load the b from 'bm80'
    ld      bc, $C000   ; point to RAM
    ld      (bc), a     ; write accumulator to RAM

    ; inc/dec tests
    inc     bc          ; no flags affected
    inc     b
    dec     b
    ld      b, $AE
    inc     b
    inc     b           ; carry?
    inc     b
    dec     b 
    dec     b           ; borrow?      

    ex af, af'
    inc a
    ex af, af'
    add hl, bc
    add hl, bc      ; carry works

    dec bc          ; no flags affected
    inc c 
    dec c 

    jr main


;==============================================================
; Some far away code, org is relative to slot
;==============================================================
; .BANK   4   slot    1
; .ORG    $0000
;     di
;     nop

;==============================================================
; includes
;==============================================================
.include "bm80.z80"
.include "mmu.z80"